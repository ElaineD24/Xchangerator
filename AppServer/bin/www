#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('appserver:server');
const http = require('http');
const CronJob = require('cron').CronJob;
const { getHydratedLatest } = require('../dataFetch');
const { setexHydratedLatest } = require('../cacheUtil');

/**
 * Activity logger
 */

const customLogger = require('../logger');
const logger = customLogger('appserver');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Cron job: every 1 hour
 */

if (process.env.NODE_APP_INSTANCE === '0') {
  logger.info(`instance 0 is running`);
  const job = new CronJob('1 * * * *', async () => {
    logger.info(`cron job triggered at ${new Date()}`);

    // fetch latest rates and write to redis
    const data = await getHydratedLatest();
    await setexHydratedLatest(data);
  });
  job.start();
  logger.info('cron job started');
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  logger.log('info', 'started listening');
  debug('Listening on ' + bind);
  if (typeof addr !== 'string') {
    debug(`To test: http://localhost:${addr.port}`);
    debug(`To test: http://localhost:${addr.port}/api/latest`);
  }
}
